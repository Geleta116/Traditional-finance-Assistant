// Mocks generated by Mockito 5.4.0 from annotations
// in traditional_financial_asistant/test/auth/authentication_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:traditional_financial_asistant/domain/auth/authenticationRepositoryInterface.dart'
    as _i3;
import 'package:traditional_financial_asistant/domain/auth/User.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRepositroyInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepositroyInterface extends _i1.Mock
    implements _i3.AuthenticationRepositroyInterface {
  MockAuthenticationRepositroyInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> logIn(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Either<String, int>> loggedIn() => (super.noSuchMethod(
        Invocation.method(
          #loggedIn,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<String, int>>.value(
            _FakeEither_0<String, int>(
          this,
          Invocation.method(
            #loggedIn,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, int>>);
  @override
  void logOut() => super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
