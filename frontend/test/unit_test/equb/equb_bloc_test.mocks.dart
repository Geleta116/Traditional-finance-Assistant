// Mocks generated by Mockito 5.4.0 from annotations
// in traditional_financial_asistant/test/unit_test/equb/equb_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:traditional_financial_asistant/domain/ekub/Ekub.dart' as _i3;
import 'package:traditional_financial_asistant/domain/ekub/ekubRepositoryInterface.dart'
    as _i4;
import 'package:traditional_financial_asistant/infrastructure/ekub/ekub_crate.Dto.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEkubCreateDto_0 extends _i1.SmartFake implements _i2.EkubCreateDto {
  _FakeEkubCreateDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEkub_1 extends _i1.SmartFake implements _i3.Ekub {
  _FakeEkub_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EkubRepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockEkubRepositoryInterface extends _i1.Mock
    implements _i4.EkubRepositoryInterface {
  MockEkubRepositoryInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.EkubCreateDto> create(_i3.Ekub? ekub) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [ekub],
        ),
        returnValue: _i5.Future<_i2.EkubCreateDto>.value(_FakeEkubCreateDto_0(
          this,
          Invocation.method(
            #create,
            [ekub],
          ),
        )),
      ) as _i5.Future<_i2.EkubCreateDto>);
  @override
  _i5.Future<_i3.Ekub> update(
    int? id,
    _i3.Ekub? ekub,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            ekub,
          ],
        ),
        returnValue: _i5.Future<_i3.Ekub>.value(_FakeEkub_1(
          this,
          Invocation.method(
            #update,
            [
              id,
              ekub,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Ekub>);
  @override
  _i5.Future<List<_i3.Ekub>> fetchAllEnrolled() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllEnrolled,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Ekub>>.value(<_i3.Ekub>[]),
      ) as _i5.Future<List<_i3.Ekub>>);
  @override
  _i5.Future<_i3.Ekub> join(
    String? name,
    String? code,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #join,
          [
            name,
            code,
          ],
        ),
        returnValue: _i5.Future<_i3.Ekub>.value(_FakeEkub_1(
          this,
          Invocation.method(
            #join,
            [
              name,
              code,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Ekub>);
}
