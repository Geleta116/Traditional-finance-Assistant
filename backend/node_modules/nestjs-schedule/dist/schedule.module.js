"use strict";
var ScheduleModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleModule = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const schedule_metadata_accessor_1 = require("./schedule-metadata.accessor");
const schedule_explorer_1 = require("./schedule.explorer");
const scheduler_orchestrator_1 = require("./scheduler.orchestrator");
const scheduler_registry_1 = require("./scheduler.registry");
const schedule_wrapper_1 = require("./schedule.wrapper");
const schedule_1 = require("./schedule");
const scanner_1 = require("./scanner");
const schedule_constants_1 = require("./schedule.constants");
const interfaces_1 = require("./interfaces");
let ScheduleModule = ScheduleModule_1 = class ScheduleModule {
    static forRoot(options) {
        const scheduleProvider = {
            provide: schedule_constants_1.SCHEDULE,
            useExisting: schedule_1.Schedule,
        };
        return {
            global: true,
            module: ScheduleModule_1,
            imports: (options === null || options === void 0 ? void 0 : options.imports) || [],
            providers: [
                schedule_explorer_1.ScheduleExplorer,
                scheduler_registry_1.SchedulerRegistry,
                schedule_wrapper_1.ScheduleWrapper,
                schedule_1.Schedule,
                scheduleProvider,
                this.createLockerProvider(options),
            ],
            exports: [scheduleProvider],
        };
    }
    static createLockerProvider(options) {
        return {
            provide: schedule_constants_1.SCHEDULE_LOCKER_SERVICE,
            useClass: (options === null || options === void 0 ? void 0 : options.useClass) || interfaces_1.DefaultLocker,
        };
    }
};
ScheduleModule = ScheduleModule_1 = tslib_1.__decorate([
    (0, common_1.Module)({
        imports: [core_1.DiscoveryModule],
        providers: [schedule_metadata_accessor_1.SchedulerMetadataAccessor, scheduler_orchestrator_1.SchedulerOrchestrator, scanner_1.Scanner],
    })
], ScheduleModule);
exports.ScheduleModule = ScheduleModule;
