"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleExplorer = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const uuid_1 = require("uuid");
const metadata_scanner_1 = require("@nestjs/core/metadata-scanner");
const scheduler_type_enum_1 = require("./enums/scheduler-type.enum");
const schedule_metadata_accessor_1 = require("./schedule-metadata.accessor");
const scheduler_orchestrator_1 = require("./scheduler.orchestrator");
const scanner_1 = require("./scanner");
const schedule_constants_1 = require("./schedule.constants");
let ScheduleExplorer = class ScheduleExplorer {
    constructor(schedulerOrchestrator, discoveryService, metadataAccessor, metadataScanner, scanner, locker) {
        this.schedulerOrchestrator = schedulerOrchestrator;
        this.discoveryService = discoveryService;
        this.metadataAccessor = metadataAccessor;
        this.metadataScanner = metadataScanner;
        this.scanner = scanner;
        this.locker = locker;
    }
    onModuleInit() {
        this.explore();
    }
    explore() {
        const providers = [
            ...this.discoveryService.getProviders(),
            ...this.discoveryService.getControllers(),
        ];
        providers.forEach((wrapper) => {
            const { instance } = wrapper;
            if (!instance || typeof instance === 'string') {
                return;
            }
            this.metadataScanner.scanFromPrototype(instance, Object.getPrototypeOf(instance), (key) => this.lookupSchedulers(instance, key));
        });
    }
    lookupSchedulers(instance, key) {
        const methodRef = instance[key];
        const metadata = this.metadataAccessor.getSchedulerType(methodRef);
        const options = this.metadataAccessor.getJobOptions(methodRef);
        const LockerClass = this.metadataAccessor.getLocker(methodRef);
        const lockerInstance = this.scanner.findInjectable(LockerClass) || this.locker;
        switch (metadata) {
            case scheduler_type_enum_1.SchedulerType.CRON: {
                const cronMetadata = this.metadataAccessor.getCronMetadata(methodRef);
                return this.schedulerOrchestrator.addCron(methodRef.bind(instance), cronMetadata, lockerInstance, Object.assign({}, options));
            }
            case scheduler_type_enum_1.SchedulerType.TIMEOUT: {
                const timeoutMetadata = this.metadataAccessor.getTimeoutMetadata(methodRef);
                const name = this.metadataAccessor.getSchedulerName(methodRef);
                return this.schedulerOrchestrator.addTimeout(methodRef.bind(instance), timeoutMetadata.timeout, name || (0, uuid_1.v4)(), lockerInstance, options);
            }
            case scheduler_type_enum_1.SchedulerType.INTERVAL: {
                const intervalMetadata = this.metadataAccessor.getIntervalMetadata(methodRef);
                const name = this.metadataAccessor.getSchedulerName(methodRef);
                return this.schedulerOrchestrator.addInterval(methodRef.bind(instance), intervalMetadata.timeout, name || (0, uuid_1.v4)(), lockerInstance, options);
            }
            default:
        }
    }
};
ScheduleExplorer = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(5, (0, common_1.Inject)(schedule_constants_1.SCHEDULE_LOCKER_SERVICE)),
    tslib_1.__metadata("design:paramtypes", [scheduler_orchestrator_1.SchedulerOrchestrator,
        core_1.DiscoveryService,
        schedule_metadata_accessor_1.SchedulerMetadataAccessor,
        metadata_scanner_1.MetadataScanner,
        scanner_1.Scanner, Object])
], ScheduleExplorer);
exports.ScheduleExplorer = ScheduleExplorer;
