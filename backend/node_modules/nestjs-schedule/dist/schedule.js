"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const uuid_1 = require("uuid");
const scheduler_registry_1 = require("./scheduler.registry");
const scheduler_orchestrator_1 = require("./scheduler.orchestrator");
const schedule_constants_1 = require("./schedule.constants");
let Schedule = class Schedule {
    constructor(locker, registry, schedulerOrchestrator) {
        this.locker = locker;
        this.registry = registry;
        this.schedulerOrchestrator = schedulerOrchestrator;
    }
    getLocker(locker) {
        if (locker === false) {
            return undefined;
        }
        return locker || this.locker;
    }
    createTimeoutJob(methodRef, timeout, options = {}, locker) {
        const name = options.name || (0, uuid_1.v4)();
        this.registry.addTimeoutJob(name, {
            target: methodRef,
            timeout,
            locker: this.getLocker(locker),
            options,
        });
        this.schedulerOrchestrator.mountTimeouts();
    }
    createIntervalJob(methodRef, interval, options = {}, locker) {
        const name = options.name || (0, uuid_1.v4)();
        this.registry.addIntervalJob(name, {
            target: methodRef,
            interval,
            locker: this.getLocker(locker),
            options,
        });
        this.schedulerOrchestrator.mountIntervals();
    }
    createCronJob(rule, methodRef, options = {}, locker) {
        const name = options.name || (0, uuid_1.v4)();
        this.registry.addCronJob(name, {
            target: methodRef,
            rule,
            locker: this.getLocker(locker),
            options,
        });
        this.schedulerOrchestrator.mountCron();
    }
    deleteTimeoutJob(name) {
        this.registry.deleteTimeoutJob(name);
    }
    deleteIntervalJob(name) {
        this.registry.deleteIntervalJob(name);
    }
    deleteCronJob(name) {
        this.registry.deleteCronJob(name);
    }
    getTimeoutJobs() {
        return [...this.registry.getTimeoutJobs().values()];
    }
    getIntervalJobs() {
        return [...this.registry.getIntervalJobs().values()];
    }
    getCronJobs() {
        return [...this.registry.getCronJobs().values()];
    }
};
Schedule = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, common_1.Inject)(schedule_constants_1.SCHEDULE_LOCKER_SERVICE)),
    tslib_1.__metadata("design:paramtypes", [Object, scheduler_registry_1.SchedulerRegistry,
        scheduler_orchestrator_1.SchedulerOrchestrator])
], Schedule);
exports.Schedule = Schedule;
