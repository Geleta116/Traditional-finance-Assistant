"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerRegistry = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const schedule_messages_1 = require("./schedule.messages");
let SchedulerRegistry = class SchedulerRegistry {
    constructor() {
        this.cronJobs = new Map();
        this.timeouts = new Map();
        this.intervals = new Map();
    }
    getCronJob(name) {
        const job = this.cronJobs.get(name);
        if (!job) {
            throw new Error((0, schedule_messages_1.NO_SCHEDULER_FOUND)('Cron Job', name));
        }
        return job;
    }
    getIntervalJob(name) {
        const job = this.intervals.get(name);
        if (typeof job === 'undefined') {
            throw new Error((0, schedule_messages_1.NO_SCHEDULER_FOUND)('Interval', name));
        }
        return job;
    }
    getTimeoutJob(name) {
        const job = this.timeouts.get(name);
        if (typeof job === 'undefined') {
            throw new Error((0, schedule_messages_1.NO_SCHEDULER_FOUND)('Timeout', name));
        }
        return job;
    }
    addCronJob(name, cronJob) {
        const job = this.cronJobs.get(name);
        if (job) {
            throw new Error((0, schedule_messages_1.DUPLICATE_SCHEDULER)('Cron Job', name));
        }
        this.cronJobs.set(name, cronJob);
    }
    addIntervalJob(name, intervalJob) {
        const job = this.intervals.get(name);
        if (job) {
            throw new Error((0, schedule_messages_1.DUPLICATE_SCHEDULER)('Interval', name));
        }
        this.intervals.set(name, intervalJob);
    }
    addTimeoutJob(name, timeoutJob) {
        const job = this.timeouts.get(name);
        if (job) {
            throw new Error((0, schedule_messages_1.DUPLICATE_SCHEDULER)('Timeout', name));
        }
        this.timeouts.set(name, timeoutJob);
    }
    getCronJobs() {
        return this.cronJobs;
    }
    deleteCronJob(name) {
        var _a;
        const cronJob = this.getCronJob(name);
        (_a = cronJob.job) === null || _a === void 0 ? void 0 : _a.cancel();
        this.cronJobs.delete(name);
    }
    getIntervalJobs() {
        return this.intervals;
    }
    deleteIntervalJob(name) {
        const job = this.getIntervalJob(name);
        clearInterval(job.ref);
        this.intervals.delete(name);
    }
    getTimeoutJobs() {
        return this.timeouts;
    }
    deleteTimeoutJob(name) {
        const job = this.getTimeoutJob(name);
        clearTimeout(job.ref);
        this.timeouts.delete(name);
    }
};
SchedulerRegistry = tslib_1.__decorate([
    (0, common_1.Injectable)()
], SchedulerRegistry);
exports.SchedulerRegistry = SchedulerRegistry;
