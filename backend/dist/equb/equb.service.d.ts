import { Repository } from 'typeorm';
import { UserService } from '../user/user.service';
import { EqubMembers } from '../typeorm/equb entities/members.entity';
import { Equb } from '../typeorm/equb entities/equb.entity';
import { User } from '../typeorm/user entities/user.entity';
import { EqubNotification } from '../typeorm/equb entities/notification.entity';
import { BlackList } from '../typeorm/equb entities/blackList.entity';
import { Equbchatroom } from '../typeorm/equb entities/equb.chatroom.entity';
export declare class EqubService {
    private memebersRepository;
    private equbRepository;
    private userRepository;
    private notificationRepository;
    private blacklistRepository;
    private equbchatroomRepository;
    private readonly userService;
    constructor(memebersRepository: Repository<EqubMembers>, equbRepository: Repository<Equb>, userRepository: Repository<User>, notificationRepository: Repository<EqubNotification>, blacklistRepository: Repository<BlackList>, equbchatroomRepository: Repository<Equbchatroom>, userService: UserService);
    private readonly logger;
    generateRandomString(length: number): string;
    createEqub(equb: any, usr: any): Promise<any>;
    joinEqub(equbName: any, code: any, username: any): Promise<EqubMembers>;
    deleteEqub(equbId: any): Promise<import("typeorm").DeleteResult>;
    updateEqub(equbId: any, equbdata: any): Promise<import("typeorm").UpdateResult>;
    deleteMember(username: any, equbId: any): Promise<import("typeorm").DeleteResult>;
    getAllEqubs(username: string): Promise<any[]>;
    checkRedundency(username: any, name: any): Promise<boolean>;
    getDataAboutEqub(equbId: any): Promise<Equb>;
    getMembersOfEqub(equbid: any): Promise<any[]>;
    getSingleMemberOfEqub(equbid: any, username: any): Promise<EqubMembers>;
    getUnwonMembers(equbId: any): Promise<EqubMembers[]>;
    getCurrentWinner(equbId: any): Promise<{
        name: string;
        username: string;
    }>;
    payEqub(username: any, equbId: any): Promise<void>;
    canPay(username: any, equbId: any): Promise<boolean>;
    addToBlackList(equbId: any): Promise<void>;
    blackListMembers(equbid: any): Promise<BlackList[]>;
    determineTheWinner(equbId: any): Promise<import("typeorm").DeleteResult>;
    notification(message: string, equbId: any): Promise<void>;
    notifyUnpaidUsers(equbId: any): Promise<void>;
    getNotification(username: any): Promise<EqubNotification[]>;
    deleteNotification(id: any): Promise<import("typeorm").DeleteResult>;
    sendMessage(username: any, message: any, equbId: any): Promise<Equbchatroom>;
    getChat(equbId: any): Promise<Equbchatroom[]>;
    dailyFunction(): Promise<void>;
}
